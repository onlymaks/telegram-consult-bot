
import logging
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from fastapi import FastAPI, Request
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "") + WEBHOOK_PATH
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=API_TOKEN)
Bot.set_current(bot)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    name = State()
    topics = State()
    email = State()
    confirm = State()

app = FastAPI()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return {"ok": True}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await Form.name.set()
    await message.answer("üëã –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):")

@dp.message_handler(state=Form.name)
async def handle_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 3:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):")
        return
    await state.update_data(name=name)
    await Form.topics.set()
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=topic, callback_data=topic) for topic in ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ"]]
    keyboard.add(*buttons)
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã (–Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)

@dp.callback_query_handler(state=Form.topics)
async def handle_topics(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    selected = user_data.get("topics", [])
    topic = callback_query.data
    if topic not in selected:
        selected.append(topic)
    await state.update_data(topics=selected)
    await callback_query.answer(f"‚úÖ {topic} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ', –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤—Å—ë.", show_alert=False)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="done"))
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "done", state=Form.topics)
async def handle_topics_done(callback_query: types.CallbackQuery, state: FSMContext):
    await Form.email.set()
    await callback_query.message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

@dp.message_handler(state=Form.email)
async def handle_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(email=email)
    await Form.confirm.set()
    text = (
        "üìÑ Datenschutzerkl√§rung. Einverst√§ndniserkl√§rung in die Erhebung und Verarbeitung von Daten.\n"
        "Ich kann diese jederzeit unter email widerrufen.\n\n"
        "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ú–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —è –º–æ–≥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ email."
    )
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="confirm")
    )
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "confirm", state=Form.confirm)
async def handle_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
# –°—Ç—Ä–æ–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
text = f"üéâ –°–ø–∞—Å–∏–±–æ, {data['name']}!"\n–¢–µ–º—ã: {', '.join(data['topics'])}
Email: {data['email']}"
    await bot.send_message(callback_query.from_user.id, text)
    await state.finish()

if __name__ == "__main__":
    import asyncio
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
