
import logging
import re
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from fastapi import FastAPI, Request
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = "PLACEHOLDER"
GOOGLE_SHEET_NAME = "–ó–∞—è–≤–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
GOOGLE_SHEET_COLUMNS = ["ID", "–ò–º—è", "–¢–µ–º—ã", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–°–æ–≥–ª–∞—Å–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

user_state = {}

@app.post("/webhook/{token}")
async def webhook_handler(request: Request, token: str):
    update = types.Update(**(await request.json()))
    await dp.process_update(update)
    return {"status": "ok"}

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id] = {"step": "name"}
    await bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message_handler(lambda message: message.text)
async def process_input(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if user_id not in user_state:
        user_state[user_id] = {"step": "name"}

    step = user_state[user_id]["step"]

    if step == "name":
        if len(text) < 3:
            await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        user_state[user_id]["name"] = text
        user_state[user_id]["step"] = "topics"
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="topic:–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            InlineKeyboardButton("üè° –ò–ø–æ—Ç–µ–∫–∞", callback_data="topic:–ò–ø–æ—Ç–µ–∫–∞"),
            InlineKeyboardButton("üíº –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", callback_data="topic:–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"),
            InlineKeyboardButton("üá©üá™ –ü–µ—Ä–µ–µ–∑–¥ –≤ –ì–µ—Ä–º–∞–Ω–∏—é", callback_data="topic:–ü–µ—Ä–µ–µ–∑–¥"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_topics")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)

    elif step == "phone":
        if not text.startswith("+49") or not re.match(r"^\+49\d{7,}$", text):
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +49...")
            return
        user_state[user_id]["phone"] = text
        user_state[user_id]["step"] = "email"
        await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:")

    elif step == "email":
        if not re.match(r"[^@]+@[^@]+\.[^@]+", text):
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        user_state[user_id]["email"] = text
        user_state[user_id]["step"] = "datenschutz"
        text_ds = (
            "üìÑ Datenschutzerkl√§rung.
"
            "Einverst√§ndniserkl√§rung in die Erhebung und Verarbeitung von Daten. "
            "Ich kann diese jederzeit unter email widerrufen.

"
            "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–ú–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —è –º–æ–≥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ email."
        )
        button = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"))
        await message.answer(text_ds, reply_markup=button)

    elif step == "comment":
        user_state[user_id]["comment"] = text
        data = user_state[user_id]
        row = [
            user_id,
            data.get("name", ""),
            ", ".join(data.get("topics", [])),
            data.get("phone", ""),
            data.get("email", ""),
            data.get("comment", ""),
            "–î–∞",
            ""
        ]
        sheet.append_row(row)
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

@dp.callback_query_handler(lambda c: c.data.startswith("topic:"))
async def topic_handler(callback_query: types.CallbackQuery):
    topic = callback_query.data.split(":", 1)[1]
    user_id = callback_query.from_user.id
    topics = user_state[user_id].setdefault("topics", [])
    if topic not in topics:
        topics.append(topic)
    await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {topic}")

@dp.callback_query_handler(lambda c: c.data == "done_topics")
async def done_topics_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id]["step"] = "phone"
    await bot.send_message(user_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +49):")

@dp.callback_query_handler(lambda c: c.data == "agree")
async def agree_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id]["step"] = "comment"
    await bot.send_message(user_id, "üìù –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")

app = app
