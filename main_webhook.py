import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
from aiogram.utils.executor import start_webhook
import os

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN", "YOUR_API_TOKEN")
WEBHOOK_URL_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"https://your-deployment-url.com{WEBHOOK_URL_PATH}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

user_state = {}
user_data = {}

topics = {
    "A": "A. –î–æ—Ç–∞—Ü–∏–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞",
    "B": "B. –°—Ç—Ä–∞—Ö–æ–≤–∫–∏ (–∞–≤—Ç–æ, –º–µ–¥, –∞–¥–≤–æ–∫–∞—Ç)",
    "C": "C. –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ –¥–µ—Ç–µ–π",
    "D": "D. –ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –¥–æ—Ç–∞—Ü–∏–∏",
    "E": "E. –ö—Ä–µ–¥–∏—Ç—ã / –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    "F": "F. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è",
    "G": "G. –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "J": "J. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
}

def get_topics_keyboard(selected=None):
    selected = selected or []
    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, label in topics.items():
        mark = "‚úÖ " if key in selected else ""
        keyboard.insert(InlineKeyboardButton(f"{mark}{label}", callback_data=f"topic_{key}"))
    keyboard.insert(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_topics"))
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id] = {"step": "consent", "topics": []}
    user_data[user_id] = {}
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"))
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.

"
        "üìå –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Datenschutz). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == 'consent_yes')
async def consent_confirmed(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id]["step"] = "name"
    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message_handler(lambda message: user_state.get(message.from_user.id, {}).get("step") == "name")
async def process_name(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["name"] = message.text
    user_state[user_id]["step"] = "topics"
    user_state[user_id]["topics"] = []
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=get_topics_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith("topic_"))
async def toggle_topic(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    topic_key = callback_query.data.split("_")[1]
    selected = user_state[user_id].get("topics", [])
    if topic_key in selected:
        selected.remove(topic_key)
    else:
        selected.append(topic_key)
    user_state[user_id]["topics"] = selected
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=callback_query.message.message_id,
                                        reply_markup=get_topics_keyboard(selected))

@dp.callback_query_handler(lambda c: c.data == "done_topics")
async def confirm_topics(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data[user_id]["topics"] = user_state[user_id]["topics"]
    user_state[user_id]["step"] = "done"
    await bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")

@app.post(WEBHOOK_URL_PATH)
async def webhook_handler(request: Request):
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
