import os
from fastapi import FastAPI, Request
from starlette.responses import Response
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_PORT = int(os.getenv("PORT", 8000))
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
Bot.set_current(bot)
Dispatcher.set_current(dp)
app = FastAPI()
user_state = {}

@app.get("/")
async def root():
    return {"status": "OK ‚Äî –±–æ—Ç –∑–∞–ø—É—â–µ–Ω"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.body()
    update = types.Update(**json.loads(data.decode("utf-8")))
    await dp.process_update(update)
    return Response(status_code=200)

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    args = message.get_args()
    if args == "consult":
        await launch_consult(message)
    else:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="open_consult")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "open_consult")
async def handle_consult_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await launch_consult(callback_query.message)

async def launch_consult(message):
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_given")
    )
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
        "üìå –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Datenschutz). "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
    )
    await bot.send_message(message.chat.id, text, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "consent_given")
async def ask_name(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id] = {"step": "topics_select"}
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message_handler(lambda m: user_state.get(m.from_user.id, {}).get("step") == "topics_select")
async def start_topics(message: types.Message):
    user_id = message.from_user.id
    if len(message.text.strip()) < 3:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        return
    user_state[user_id]["name"] = message.text.strip()
    user_state[user_id]["topics"] = []
    user_state[user_id]["step"] = "topics_select"
    await send_topic_selection(user_id)


async def send_topic_selection(user_id, message_id=None):
    all_topics = [
        ("A. –î–æ—Ç–∞—Ü–∏–∏ –∏ –Ω–∞–ª–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è", "A"),
        ("B. –°—Ç—Ä–∞—Ö–æ–≤–∫–∏ (–∞–≤—Ç–æ, –º–µ–¥, –∞–¥–≤–æ–∫–∞—Ç)", "B"),
        ("C. –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞ –¥–µ—Ç–µ–π", "C"),
        ("D. –ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –¥–æ—Ç–∞—Ü–∏–∏", "D"),
        ("E. –ö—Ä–µ–¥–∏—Ç—ã / –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "E"),
        ("F. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è", "F"),
        ("G. –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "G"),
        ("J. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥", "J")
    ]
    markup = InlineKeyboardMarkup(row_width=1)
    selected = user_state.get(user_id, {}).get("topics", [])
    for label, code in all_topics:
        display = f"‚úÖ {label}" if code in selected else label
        markup.add(InlineKeyboardButton(display, callback_data=f"topic_{code}"))
    markup.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="topics_done"))

        await bot.send_message(user_id, "üìå –¢–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã...")

    if message_id:
        await bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=markup)
    else:
        msg = await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=markup)
        if user_state.get(user_id):
            user_state[user_id]["topics_message_id"] = msg.message_id


    user_state.pop(user_id, None)

@dp.message_handler(lambda m: user_state.get(m.from_user.id, {}).get("step") == "email")
async def ask_consent(message: types.Message):
    import re
    user_id = message.from_user.id
    email = message.text.strip()
    if not re.match(r"[^@\s]+@[^@\s]+\.[^@\s]+", email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:")
        return
    user_state[user_id]["email"] = email
    user_state[user_id]["step"] = "consent"
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")
    )
    text = (
        "Datenschutzerkl√§rung. Einverst√§ndniserkl√§rung in die Erhebung und Verarbeitung von Daten.\n"
        "Ich kann diese jederzeit unter email widerrufen.\n\n"
        "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ú–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —è –º–æ–≥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ email.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:"
    )
    await message.answer(text, reply_markup=markup)
