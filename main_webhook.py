from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from fastapi import FastAPI
import logging
import os

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN", "your_bot_token_here")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

user_state = {}
callback_data = CallbackData("action", "value")

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.get_args() == "consult":
        await launch_consult(message)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start?start=consult —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.")

async def launch_consult(message):
    user_id = message.chat.id
    user_state[user_id] = {}  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_given")
    )
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
        "üìå –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Datenschutz). "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
    )
    await bot.send_message(message.chat.id, text, reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "consent_given")
async def consent_given(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_state[user_id]["step"] = "name"
    await bot.send_message(user_id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@dp.message_handler(lambda message: user_state.get(message.chat.id, {}).get("step") == "name")
async def process_name(message: types.Message):
    user_id = message.chat.id
    user_state[user_id]["name"] = message.text
    user_state[user_id]["step"] = "email"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:")

@dp.message_handler(lambda message: user_state.get(message.chat.id, {}).get("step") == "email")
async def process_email(message: types.Message):
    user_id = message.chat.id
    user_state[user_id]["email"] = message.text
    user_state[user_id]["step"] = "done"
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!")

# webhook route for Render/FastAPI compatibility
@app.post("/webhook/{token}")
async def webhook(token: str, update: dict):
    if token == API_TOKEN:
        telegram_update = types.Update.to_object(update)
        await dp.process_update(telegram_update)
    return {"ok": True}