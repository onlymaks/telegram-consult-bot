
import os
from fastapi import FastAPI, Request
from starlette.responses import Response
from aiogram import Bot, Dispatcher, types
from aiogram.utils import json

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "OK ‚Äî –±–æ—Ç –∑–∞–ø—É—â–µ–Ω"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.body()
    update = types.Update(**json.loads(data.decode("utf-8")))
    await dp.process_update(update)
    return Response(status_code=200)

# ====== START CONSULTATION ======

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    args = message.get_args()
    if args == "consult":
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_given"))
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n"
            "üìå –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Datenschutz). "
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        )
        await message.answer(text, reply_markup=markup)
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å.")

@dp.callback_query_handler(lambda c: c.data == "consent_given")
async def step_ask_name(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –Ω–∞—á–Ω–µ—Ç—Å—è FSM –∏–ª–∏ –ª–æ–≥–∏–∫–∞ —à–∞–≥–æ–≤

# –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è:
# - –≤—ã–±–æ—Ä —Ç–µ–º
# - –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
# - —Ç–µ–ª–µ—Ñ–æ–Ω
# - email
# - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

